datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  password      String?   // removed @unique
  emailVerified DateTime? // Required for email/password auth
  image         String?   // Optional: Profile picture URL
  habits        SocialMediaHabit[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id])
  type              String  // OAuth provider type (e.g., "oauth")
  provider          String  // Provider name (e.g., "google")
  providerAccountId String  // Provider's unique ID for the user
  refresh_token     String? // Optional: OAuth refresh token
  access_token     String? // Optional: OAuth access token
  expires_at       Int?    // Optional: Token expiration timestamp
  token_type       String? // Optional: Token type (e.g., "Bearer")
  scope            String? // Optional: OAuth scope
  id_token         String? // Optional: OAuth ID token
  session_state    String? // Optional: Session state

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SocialMediaHabit {
  id          String    @id @default(uuid())
  platform    String    // Social media platform name (e.g., "Twitter")
  icon        String    // URL or name of the icon
  goalDuration Int?     // Optional: Daily goal in minutes
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  logs        SocialMediaLog[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SocialMediaLog {
  id        String   @id @default(uuid())
  habitId   String
  habit     SocialMediaHabit @relation(fields: [habitId], references: [id])
  logDate   DateTime
  duration  Int      // Time spent in minutes
  note      String?  // Optional notes
  status    String?  // Optional: "completed" or "missed"
  createdAt DateTime @default(now())
}